= Before beginning =

Before playing with the examples you'll find below, you should first look at:

    [[Installing Groovy>>http://groovy.codehaus.org/Installing+Groovy]]
    [[Running>>http://groovy.codehaus.org/Running]]

Some optional more advanced topics you may also wish to peruse:

    [[Command Line>>http://groovy.codehaus.org/Groovy+CLI]] : Groovy can be launched in shell script mode
    [[Compiling Groovy>>http://groovy.codehaus.org/Compiling+Groovy]] : Groovy can be launched as any Java program
    [[Embedding Groovy>>http://groovy.codehaus.org/Embedding+Groovy]] : embedding Groovy in Java code using built-in capabilities
    [[JSR 223 Scripting with Groovy>>http://groovy.codehaus.org/JSR+223+Scripting+with+Groovy]] : embedding Groovy in Java code using JSR 223
    [[Bean Scripting Framework>>http://groovy.codehaus.org/Bean+Scripting+Framework]] : embedding Groovy in Java code using the BSF

= Your First Groovy =

{{test name="hello" run="false"}}
//hello.groovy
println "hello, world"
for (arg in this.args ) {
  println "Argument:" + arg;
}
// this is a comment
/* a block comment, commenting out an alternative to above:
this.args.each{ arg -> println "hello, ${arg}"}
*/
{{/test}}

To run it from command line

{{test name="not-a-test"" run="false"}}
groovy hello.groovy MyName yourName HisName
{{/test}}

= Overview =

Groovy classes compile down to Java bytecode and so there's a 1-1 mapping between a Groovy class and a Java class.

Indeed each Groovy class can be used inside normal Java code - since it is a Java class too.

Probably the easiest way to get groovy is to try working with collections. In Groovy List (java.util.List) and Map (java.util.Map) are both first class objects in the syntax. So to create a List of objects you can do the following...

{{test name="collections-list"}}
def list = [1, 2, 'hello', new java.util.Date()]
assert list.size() == 4
assert list.get(2) == 'hello'
assert list[2] == 'hello'
{{/test}}

Notice that everything is an object (or that auto-boxing takes place when working with numbers). To create maps...

{{test name="collections-map"}}
def map = ['name':'James', 'location':'London']
assert map.size() == 2
assert map.get('name') == 'James'
assert map['name'] == 'James'
{{/test}}

Iterating over collections is easy...

{{test name="collection-iterating"}}
def list = [1, 2, 3]
for (i in list) { println i }
{{/test}}

Once you have some collections you can then use some of the new collection helper methods or try working with closures...
= Working with closures =

Closures are similar to Java's inner classes, except they are a single method which is invokable, with arbitrary parameters. A closure can have as many parameters as you wish...

{{test name="call-closure" run="false"}}
def closure = { param -> println("hello ${param}") }
closure.call("world!")

closure = { greeting, name -> println(greeting + name) }
closure.call("hello ", "world!")
{{/test}}

If no parameter(s) is(are) specified before the -> symbol then a default named parameter, called 'it' can be used. e.g.

{{test name="call-closure-it-parameter" run="false"}}
def closure = { println "hello " + it }
closure.call("world!")
{{/test}}

Using closures allows us to process collections (arrays, maps, strings, files, SQL connections and so forth) in a clean way. e.g

{{test name="closure-each" run="false"}}
[1, 2, 3].each ({ item -> print "${item}-" })
["k1":"v1", "k2":"v2"].each {key, value -> println key + "=" + value}
{{/test}}

Note: If a given closure is the last parameter of a method, its definition can reside outside of the parentheses. Thus the following code is valid:

{{test name="call-closure-object" run="false"}}
def fun(int i, Closure c) {
  c.call(i)
}

// put Closure out of ()
[1, 2, 3].each() { item -> print "${item}-" } // 1-2-3-
fun(123) { i -> println i } // 123

// omit ()
[1, 2, 3].each ({ item -> print "${item}-" }) // 1-2-3-

// omit enclosing ()
[1, 2, 3].each { item -> print "${item}-" } // 1-2-3-

// normal
[1, 2, 3].each(({ item -> print "${item}-" })) // 1-2-3-

// using the fun function to do the same thing
[1,2,3].each {fun(it,{item -> print "${item}-"})} // 1-2-3-

def closure = { i -> println i}

//[1, 2, 3].each() closure // error. closure has been previously defined
{{/test}}

Here are a number of helper methods available on collections & strings...

== each ==

iterate via a closure

{{test name="iterate-via-a-closure" run="false"}}
[1, 2, 3].each { item -> print "${item}-" }
{{/test}}

== collect ==

collect the return value of calling a closure on each item in a collection

{{test name="collect-closure-return-value"}}
def value = [1, 2, 3].collect { it * 2 }
assert value == [2, 4, 6]
{{/test}}

== find ==

finds first item matching closure predicate

{{test name="find-first-item"}}
def value = [1, 2, 3].find { it > 1 }
assert value == 2
{{/test}}

== findAll ==

finds all items matching closure predicate

{{test name="find-items-matching-closure-predicate"}}
def value = [1, 2, 3].findAll { it > 1 }
assert value == [2, 3]
{{/test}}

== inject ==

allows you to pass a value into the first iteration and then pass the result of that iteration into the next iteration and so on. This is ideal for counting and other forms of processing

{{test name="inject"}}
def value = [1, 2, 3].inject('counting: ') { str, item -> str + item }
assert value == "counting: 123"

value = [1, 2, 3].inject(0) { count, item -> count + item }
assert value == 6
{{/test}}

In addition there's 2 new methods for doing boolean logic on some collection...

== every ==

returns true if all items match the closure predicate

{{test name="every-item-match"}}
def value = [1, 2, 3].every { it < 5 }
assert value

value = [1, 2, 3].every { item -> item < 3 }
assert ! value
{{/test}}

== any ==

returns true if any item match the closure predicate

{{test name="any-item-match"}}
def value = [1, 2, 3].any { it > 2 }
assert value

value = [1, 2, 3].any { item -> item > 3 }
assert value == false
{{/test}}

Other helper methods include:
== max / min ==

returns the max/min values of the collection - for Comparable objects

{{test name="find-max-min" run="false"}}
value = [9, 4, 2, 10, 5].max()
assert value == 10
value = [9, 4, 2, 10, 5].min()
assert value == 2
value = ['x', 'y', 'a', 'z'].min()
assert value == 'a'
{{/test}}

== join ==

concatenates the values of the collection together with a string value

{{test name="join" run="false"}}
def value = [1, 2, 3].join('-')
assert value == '1-2-3'
{{/test}}